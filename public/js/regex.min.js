"use strict";var inputs=[],matches=[];function comparison(){regex=document.querySelector("#regex"),read_cases(),regex.oninput=function(){check_rows()},inputs.forEach(function(e){e.oninput=function(){handler(e)}})}function check_rows(){convert_to_regex()?inputs.forEach(function(e){handler(e)}):matches.forEach(function(e){remove_match(e)})}function handler(e){var t=e.nextElementSibling,n=convert_to_regex();n instanceof RegExp&&(n.test(e.value)?add_match(t):remove_match(t))}function add_match(e){e.classList.remove("increase"),e.classList.add("decrease"),e.addEventListener("webkitAnimationEnd",function(){console.log(e),e.classList.remove("no-match"),e.classList.remove("decrease"),e.classList.add("match"),e.innerHTML="&#xf00c",e.classList.add("increase")})}function read_cases(){var e=document.querySelectorAll(".my-case-block");inputs.length=0,matches.length=0;for(var t=0;t<e.length;t++)inputs[t]=e[t].children[0],matches[t]=e[t].children[1]}function convert_to_regex(){var e=/^\/.*\/(?:([igmy])(?!\1)){0,4}$/,t=regex.value;if(e.test(t)){e=/\/(.*)\/(.*)$/;var n=t.match(e);return e=new RegExp("^"+n[1]+"$",n[2])}return!1}function remove_match(e){e.classList.remove("increase"),e.classList.add("decrease"),e.addEventListener("webkitAnimationEnd",function(){console.log(e),e.classList.remove("match"),e.classList.remove("decrease"),e.classList.add("no-match"),e.innerHTML="&#xf00d",e.classList.add("increase")})}function add_field(){var e=document.createElement("div");return e.className="my-case-block",e.innerHTML='<input type="text" class="case-text"/> <div class="answer no-match">&#xf00d</div><input type="button" value="&#xf068" id="remove" onclick="return remove_field(this)">',document.getElementById("block-cases").appendChild(e),read_cases(),inputs[inputs.length-1].oninput=function(){handler(inputs[inputs.length-1])},handler(inputs[inputs.length-1]),e.classList.add("add-case-block"),!1}function remove_field(e){var t=e.parentNode,n=t.nextElementSibling,a=n;for(t.classList.remove("add-case-block"),t.classList.add("remove-case-block"),t.addEventListener("webkitAnimationEnd",function(){t.parentNode.removeChild(t),read_cases()});null!=n;)n.classList.add("move-up-case"),n=n.nextElementSibling;return setTimeout(deleteMoveUpAnimation,1e3,a),!1}function deleteMoveUpAnimation(e){for(var t=e;null!=t;)console.log(t),t.classList.remove("move-up-case"),t.classList.remove("add-case-block"),t=t.nextElementSibling}function fillCompareExample(e){console.log(e),regex.value=e.regex;for(var t=0;t<e.values.length;t++)inputs[t].value=e.values[t];check_rows()}var regex,replacement,text_before=[],text_after=[],text_expected=[];matches=[];function replace(){regex=document.querySelector("#regex"),replacement=document.querySelector("#replacement"),read_cases_replacement(),regex.oninput=function(){getResultOfReplacementForAll()},replacement.oninput=function(){getResultOfReplacementForAll()},addEvents()}function addEvents(){for(var e=0;e<text_before.length;e++)text_before[e].oninput=function(){getResultOfReplacement(this),determineMatch(this.nextElementSibling.nextElementSibling)},text_expected[e].oninput=function(){determineMatch(this)}}function getResultOfReplacementForAll(){for(var e=0;e<text_before.length;e++)getResultOfReplacement(text_before[e]),determineMatch(text_expected[e])}function getResultOfReplacement(e){var t=e.nextElementSibling,n=convert_to_regex_replacement(regex.value);if(n){console.log(!0);var a=replacement.value,s=e.value;t.value=s.replace(n,a)}}function determineMatch(e){var t=e.nextElementSibling,n=e.previousElementSibling;e.value==n.value?add_match(t):remove_match(t)}function remove_match(e){e.classList.remove("increase"),e.classList.add("decrease"),e.addEventListener("webkitAnimationEnd",function(){console.log(e),e.classList.remove("match"),e.classList.remove("decrease"),e.classList.add("no-match"),e.innerHTML="&#xf00d",e.classList.add("increase")})}function add_match(e){e.classList.remove("increase"),e.classList.add("decrease"),e.addEventListener("webkitAnimationEnd",function(){console.log(e),e.classList.remove("no-match"),e.classList.remove("decrease"),e.classList.add("match"),e.innerHTML="&#xf00c",e.classList.add("increase")})}function convert_to_regex_replacement(){var e=/^\/.*\/(?:([igmy])(?!\1)){0,4}$/,t=regex.value;if(e.test(t)){e=/\/(.*)\/(.*)$/;var n=t.match(e);return e=new RegExp(n[1],n[2])}return!1}function read_cases_replacement(){var e=document.querySelectorAll(".my-case-block");text_before.length=0,text_after.length=0,text_expected.length=0,matches.length=0;for(var t=0;t<e.length;t++)text_before[t]=e[t].children[0],text_after[t]=e[t].children[1],text_expected[t]=e[t].children[2],matches[t]=e[t].children[3]}function add_replacement_field(){var e=document.createElement("div");return e.className="my-case-block",e.innerHTML='<textarea class="text_before" placeholder="original text"></textarea><textarea class="text_after" placeholder="result of replacement" disabled></textarea><textarea class="text_expected" placeholder="expected result"></textarea><div class="answer no-match increase">&#xf00d</div> <input type="button" value="&#xf068" id="remove" onclick="return remove_replacement_field(this)">',document.getElementById("block-cases").appendChild(e),read_cases_replacement(),addEvents(),e.classList.add("add-case-block"),!1}function remove_replacement_field(e){var t=e.parentNode,n=t.nextElementSibling,a=n;for(t.classList.remove("add-case-block"),t.classList.add("remove-case-block"),t.addEventListener("webkitAnimationEnd",function(){t.parentNode.removeChild(t),read_cases_replacement(),addEvents()});null!=n;)n.classList.add("move-up-case"),n=n.nextElementSibling;return setTimeout(deleteMoveUpAnimation,1e3,a),!1}function deleteMoveUpAnimation(e){for(var t=e;null!=t;)console.log(t),t.classList.remove("move-up-case"),t.classList.remove("add-case-block"),t=t.nextElementSibling}function fillReplaceExample(e){regex.value=e.regex,replacement.value=e.replace;for(var t=0;t<e.values.length;t++)text_before[t].value=e.values[t].value,text_expected[t].value=e.values[t].answer;read_cases_replacement(),getResultOfReplacementForAll(),console.log(e)}document.addEventListener("DOMContentLoaded",function(){getPage("menu"),getPage("compare")}),window.onpopstate=function(){getPage(document.location.hash.replace("#",""))};function getPage(e,t){var n=new XMLHttpRequest;n.open("GET","/"+e+".html",!0),n.setRequestHeader("X-Requested-With","XMLHttpRequest"),n.send(),n.onreadystatechange=function(){4==n.readyState&&(200!=n.status?alert(n.status+": "+n.statusText):"menu"==e?document.querySelector(".menu").innerHTML=n.responseText:(document.querySelector(".flex-container").innerHTML=n.responseText,"compare"==e?comparison():"replace"==e&&replace(),null!=t&&getTasks(t)))}}function getTasks(e){var t=new XMLHttpRequest;t.open("GET","../tasks/"+e+"Tasks.json",!0),t.setRequestHeader("X-Requested-With","XMLHttpRequest"),t.send(),t.onreadystatechange=function(){if(4==t.readyState)if(200!=t.status)alert(t.status+": "+t.statusText);else{var n=JSON.parse(t.responseText);"compare1"==e||"compare2"==e?fillCompareExample(n):"replace1"!=e&&"replace2"!=e||fillReplaceExample(n)}}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
